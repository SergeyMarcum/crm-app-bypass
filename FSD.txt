crm-app/
│── src/
│   ├── app/                       # Глобальная конфигурация приложения
│   │   ├── App.tsx                # Корневой компонент  
│   │   ├── ErrorBoundary.tsx      # Обработчик ошибок
│   │   ├── router-config.tsx      # Настройка маршрутов (Маршрутизация)
│   │   ├── router.tsx             # Настройка маршрутов (Маршрутизация)
│   │   ├── routes.tsx             # Настройка маршрутов (Маршрутизация)
│   ├── entities/                  # Бизнес-сущности (User, Employee, Task и т.д.)
│   │   ├── message/               # Для работы чата 
│   │   │   ├── model.ts           # Модель для чата
│   │   │   ├── types.ts           # Типы для чата
│   │   ├── check.ts               # Типы для сущности проверки
│   │   ├── defect.ts              # Типы для сущности дефекта
│   │   ├── employee.ts            # типы для Интерфейса сотрудника
│   │   ├── nonCompliance.ts       # типы для Интерфейса Несоответствия
│   │   ├── object.ts              # типы для Интерфейса Несоответствия
│   │   ├── parameter.ts           # типы для Интерфейса Параметров проверки объекта
│   │   ├── user.ts                # типы для Интерфейса объекта
│   │   ├── task.ts                # типы для Интерфейса задачи
│   ├── features/                  # Функциональные возможности (Auth, Dashboard и т.д.)
│   │   ├── auth/
│   │   │   ├── api.ts             # API для авторизации
│   │   │   ├── store.ts           # Zustand store для авторизации
│   │   │   ├── components/
│   │   │   │   ├── LoginForm.tsx  # Форма входа
│   │   ├── calendar/
│   │   │   ├── hooks/
│   │   │   │   ├── useCalendar.ts # Хук для получения и фильтрации календаря
│   │   │   ├── api.ts             # API-запросы для проверок
│   │   │   ├── types.ts           # Типы для фильтров
│   │   ├── checks/
│   │   │   ├── hooks/
│   │   │   │   ├── useChecks.ts   # Хук для получения и фильтрации проверок
│   │   │   ├── api.ts             # API-запросы для проверок
│   │   │   ├── types.ts           # Типы для фильтров
│   │   ├── defects/
│   │   │   ├── hooks/
│   │   │   │   ├── useDefects.ts   # Хук для получения и фильтрации дефектов
│   │   │   ├── api.ts             # API-запросы для дефектов
│   │   │   ├── types.ts           # Типы для фильтров
│   │   ├── tasks/                 # tasks  
│   │   │   ├── hooks/             # hooks user 
│   │   │   │   ├── useTask.ts     # hook useTask (для просмотра задания)
│   │   │   │   ├── useTaskList.ts # hook useTaskList (для контроля заданий)
│   │   │   ├── components/        # components 
│   │   │   │   ├── Chat.tsx       # Chat block
│   │   ├── user-list/             # user-list  
│   │   │   ├── hooks/             # hooks user 
│   │   │   │   ├── useUserList.ts # hook useUserList (для пользователей)
│   │   │   │   ├── useEmployeeList.ts # hook useEmployeeList (для сотрудников)
│   │   │   ├── components/        # components 
│   │   │   │   ├── EditButtonRenderer.tsx  # EditButtonRenderer
│   ├── pages/                     # Страницы приложения
│   │   ├── calendar               # calendar  
│   │   │   ├── CheckModal.tsx     # Для модального окна 
│   │   │   ├── index.tsx          # Страница отображения календаря работ (день, месяц, год) 
│   │   ├── dashboard              # dashboard  
│   │   │   ├── AppUsageChart.tsx  # Построение графиокв
│   │   │   ├── index.tsx          # Главная страница - Dashboard
│   │   ├── employees              # employees  
│   │   │   ├── index.tsx          # Страница отображения таблицы сотрудников с групировкой их в отделы или группы 
│   │   ├── help                   # help  
│   │   │   ├── index.tsx          # Страница формы для обратной связи с техподержкой     
│   │   ├── instructions           # instructions  
│   │   │   ├── index.tsx          # Страница отображением документации по работе с приложением 
│   │   ├── login                  # login  
│   │   │   ├── index.tsx          # Страница авторизации пользователя
│   │   ├── logs                   # Блок с журналами  
│   │   │   ├── checks             # checks  
│   │   │   │   ├── index.tsx      # Страница отображение таблицы журнала проверок 
│   │   │   │   ├── ChecksTable.tsx # Компонент таблицы проверок
│   │   │   ├── defects/
│   │   │   │   ├── index.tsx      # Страница журнала дефектов
│   │   │   │   ├── DefectsTable.tsx # Компонент таблицы дефектов
│   │   ├── messages               # messages  
│   │   │   ├── index.tsx          # Страница отображения сообщений между пользователем
│   │   ├── objects                # objects  
│   │   │   ├── index.tsx          # Страница отображения списка объектов с возможность добавлять/удалять/редактировать 
│   │   ├── settings               # settings  
│   │   │   ├── index.tsx          # Страница настройки приложения (цвет, тема и тд)
│   │   ├── tasks                  # Блок заданий
│   │   │   ├── control            # control  
│   │   │   │   ├── index.tsx      # Страница отображение таблицы с заданиями 
│   │   │   ├── create             # create  
│   │   │   │   ├── index.tsx      # Страница создания задания 
│   │   │   ├── view               # view  
│   │   │   │   ├── index.tsx      # Страница просмотра задания 
│   │   ├── users                  # users  
│   │   │   ├── index.tsx          # Страница отображения списка пользователей с возможностью изменения статуса и прав доступа 
│   │   ├── ErrorPage.tsx          # Страница вывода ошибок приложения
│   ├── shared/                    # Общие утилиты, хелперы, API
│   │   ├── api                    # api 
│   │   │   ├── authApi.ts         # api для авторизации пользователей
│   │   │   ├── axios.ts           # Настройка Axios
│   │   │   ├── checksApi.ts       # API для работы с проверками
│   │   │   ├── dashboardApi.ts    # api для организации отображения графиков
│   │   │   ├── defectsApi.ts      # API для работы с дефектами
│   │   │   ├── dashboardApi.ts    # api для организации отображения графиков
│   │   │   ├── helpApi.ts         # для работы с формой для обратной связи с техподержкой
│   │   │   ├── nonComplianceApi.ts # api для организации отображения Несоответствия 
│   │   │   ├── objectApi.ts       # api для организации объектов
│   │   │   ├── parameterApi.ts    # api для организации параметров проверки объектов
│   │   │   ├── reportApi.ts       # api для организации выгрузки отчета
│   │   │   ├── searchApi.ts       # api для организации поиска
│   │   │   ├── settingsApi.ts     # для работы со страницей настройки
│   │   │   ├── taskApi.ts         # для отоброжения задач
│   │   │   ├── userApi.ts         # для отоброжения пользователей
│   │   ├── hooks                  # hooks
│   │   │   ├── useUser.ts         # Хук useUser
│   │   ├── config                 # Компонент layout 
│   │   │   ├── navigation.tsx     # Список элементов для sidebar  
│   ├── styles/                    # Стилистика приложения
│   │   ├── index.css              # Общий стили для всего приложения
│   │   ├── theme.ts               # Определение темы для приложения
│   ├── widgets/                   # Переиспользуемые UI-компоненты (Sidebar, Header)
│   │   ├── header                 # Компонент header  
│   │   │   ├── Header.tsx         # Верхний бар (шапка приложения)  
│   │   ├── layout                 # Компонент layout 
│   │   │   ├── DashboardLayout.tsx # Основной Layout (каркас приложения) 
│   │   │   ├── Layout.tsx         # Layout (каркас) для страницы авторизации
│   │   ├── sidebar                # Компонент sidebar  
│   │   │   ├── Sidebar.tsx        # Боковое меню  
│   │   ├── toolbar                # Компонент toolbar   
│   │   │   ├── ToolbarActions.tsx # Компонент дополнение для шапки приложения  
│   ├── main.tsx                   # Точка входа
│   ├── vite-env.d.ts              # Глобальная конфигурация приложения
│── .env                           # env for Vite
│── .env.test                      # env для тестового режима
│── .gitignore  
│── db.json                        # База данных для JSON-сервера
│── eslint.config.js               # Конфигурация для eslint
│── FSD.txt                        # Структура приложение согласно FSD v.2.1
│── index.html                     # Начальная страница приложения
│── package-lock.json              # Фиксирует точные версии всех установленных зависимостей
│── package.json                   # Файл конфигурации npm
│── tsconfig.app.json              # Конфигурационный файл TypeScript
│── tsconfig.json                  # Главный конфигурационный файл TypeScript-проекта, который говорит компилятору (tsc), как именно собирать проект.
│── tsconfig.node.json             # Специальный конфигурационный файл TypeScript, который обычно используется для настройки компиляции части проекта.
│── vite.config.ts                 # Конфигурация Vite